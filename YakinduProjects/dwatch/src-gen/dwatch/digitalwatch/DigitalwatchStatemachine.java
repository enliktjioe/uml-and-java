/** Generated by YAKINDU Statechart Tools code generator. */
package dwatch.digitalwatch;

import dwatch.ITimer;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DigitalwatchStatemachine implements IDigitalwatchStatemachine {
	protected class SCIButtonsImpl implements SCIButtons {
	
		private boolean topLeftPressed;
		
		
		public void raiseTopLeftPressed() {
			synchronized(DigitalwatchStatemachine.this) {
				topLeftPressed = true;
				runCycle();
			}
		}
		
		private boolean topLeftReleased;
		
		
		public void raiseTopLeftReleased() {
			synchronized(DigitalwatchStatemachine.this) {
				topLeftReleased = true;
				runCycle();
			}
		}
		
		private boolean topRightPressed;
		
		
		public void raiseTopRightPressed() {
			synchronized(DigitalwatchStatemachine.this) {
				topRightPressed = true;
				runCycle();
			}
		}
		
		private boolean topRightReleased;
		
		
		public void raiseTopRightReleased() {
			synchronized(DigitalwatchStatemachine.this) {
				topRightReleased = true;
				runCycle();
			}
		}
		
		private boolean botLeftPressed;
		
		
		public void raiseBotLeftPressed() {
			synchronized(DigitalwatchStatemachine.this) {
				botLeftPressed = true;
				runCycle();
			}
		}
		
		private boolean botLeftReleased;
		
		
		public void raiseBotLeftReleased() {
			synchronized(DigitalwatchStatemachine.this) {
				botLeftReleased = true;
				runCycle();
			}
		}
		
		private boolean botRightPressed;
		
		
		public void raiseBotRightPressed() {
			synchronized(DigitalwatchStatemachine.this) {
				botRightPressed = true;
				runCycle();
			}
		}
		
		private boolean botRightReleased;
		
		
		public void raiseBotRightReleased() {
			synchronized(DigitalwatchStatemachine.this) {
				botRightReleased = true;
				runCycle();
			}
		}
		
		protected void clearEvents() {
			topLeftPressed = false;
			topLeftReleased = false;
			topRightPressed = false;
			topRightReleased = false;
			botLeftPressed = false;
			botLeftReleased = false;
			botRightPressed = false;
			botRightReleased = false;
		}
	}
	
	
	protected class SCIDisplayImpl implements SCIDisplay {
	
		private SCIDisplayOperationCallback operationCallback;
		
		public synchronized void setSCIDisplayOperationCallback(
				SCIDisplayOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	
	protected class SCILogicUnitImpl implements SCILogicUnit {
	
		private SCILogicUnitOperationCallback operationCallback;
		
		public synchronized void setSCILogicUnitOperationCallback(
				SCILogicUnitOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	
	protected SCIButtonsImpl sCIButtons;
	
	protected SCIDisplayImpl sCIDisplay;
	
	protected SCILogicUnitImpl sCILogicUnit;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Dead,
		main_region_Alive,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private long n;
	
	protected long getN() {
		synchronized(DigitalwatchStatemachine.this) {
			return n;
		}
	}
	
	protected void setN(long value) {
		synchronized(DigitalwatchStatemachine.this) {
			this.n = value;
		}
	}
	
	
	public DigitalwatchStatemachine() {
		sCIButtons = new SCIButtonsImpl();
		sCIDisplay = new SCIDisplayImpl();
		sCILogicUnit = new SCILogicUnitImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCIDisplay.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIDisplay must be set.");
		}
		
		if (this.sCILogicUnit.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCILogicUnit must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		setN(0);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Dead:
				main_region_Dead_react(true);
				break;
			case main_region_Alive:
				main_region_Alive_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIButtons.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Dead:
			return stateVector[0] == State.main_region_Dead;
		case main_region_Alive:
			return stateVector[0] == State.main_region_Alive;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCIButtons getSCIButtons() {
		return sCIButtons;
	}
	
	public SCIDisplay getSCIDisplay() {
		return sCIDisplay;
	}
	
	public SCILogicUnit getSCILogicUnit() {
		return sCILogicUnit;
	}
	
	/* Entry action for state 'Dead'. */
	private void entryAction_main_region_Dead() {
		timer.setTimer(this, 0, 200, false);
		
		sCIDisplay.operationCallback.refreshTimeDisplay();
		
		sCIDisplay.operationCallback.unsetIndiglo();
	}
	
	/* Entry action for state 'Alive'. */
	private void entryAction_main_region_Alive() {
		timer.setTimer(this, 1, 200, false);
		
		sCIDisplay.operationCallback.setIndiglo();
		
		sCILogicUnit.operationCallback.increaseTimeByOne();
		
		sCIDisplay.operationCallback.hidePos(getN());
		
		setN((((n + 1)) % 6));
	}
	
	/* Exit action for state 'Dead'. */
	private void exitAction_main_region_Dead() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Alive'. */
	private void exitAction_main_region_Alive() {
		timer.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state Dead */
	private void enterSequence_main_region_Dead_default() {
		entryAction_main_region_Dead();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Dead;
	}
	
	/* 'default' enter sequence for state Alive */
	private void enterSequence_main_region_Alive_default() {
		entryAction_main_region_Alive();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Alive;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Dead */
	private void exitSequence_main_region_Dead() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Dead();
	}
	
	/* Default exit sequence for state Alive */
	private void exitSequence_main_region_Alive() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Alive();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Dead:
			exitSequence_main_region_Dead();
			break;
		case main_region_Alive:
			exitSequence_main_region_Alive();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Dead_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Dead_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (timeEvents[0]) {
					exitSequence_main_region_Dead();
					enterSequence_main_region_Alive_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Alive_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (timeEvents[1]) {
					exitSequence_main_region_Alive();
					enterSequence_main_region_Dead_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
}
